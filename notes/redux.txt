Redux Toolkit simplifies the old Redux.

What is Redux? It is a central store for your data. This stores your info in a centralized location for use
in your app. Redux Toolkit is a framework around Redux that makes it useful and simplistic.

Redux makes your state changes TESTABLE! Most bugs center around state changes happening where you don't
expect them. With Redux and Redux Toolkit, anything involving state is now testable and readable, which are
two VERY IMPORTANT features to good code.

Interestingly: Redux works with angular and other frameworks as well.

Redux is NOT a replacement for setState()!!! setState function is mainly for like one-off states such as
showModal. Redux is more used for App level states, things like "which user is logged in" or in our case,
"which pet has been adopted".

It's like a mini-database that's on the browser-side. **NOT A PERFECT ANALOGY** But the idea is there.

With store, we need to useDispatch() function. The dispatch function allows us to send actions to the store.
Since dispatch allows us to change the state, we also need to READ it to display it out to the screen.

useSelector() function is the one that allows us to READ the state from the store. With this function, we're
subscribing to the output of this function. Whenever the state changes, this value will change, and as a
result, the component gets re-rendered to the screen.

BEST PRACTICE NOTE: you should ALWAYS useSelector() with the BARE MINIMUM amount of data. Otherwise, you're
always going to be re-rendering when any state changes happen.

Redux is MORE indirection, but now we can test the reducer, the action creator function, etc. This is more
testable than Context because that's HARD to test.